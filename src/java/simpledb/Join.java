package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    DbIterator j_child1;
    DbIterator j_child2;
    JoinPredicate j_p;
    Tuple left_tuple;
    
    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
    	
    	j_child1 = child1;
    	j_child2 = child2;
    	j_p = p;
    	
    	left_tuple = null;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
    	
        return j_p;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
    	
    	//TupleDesc td = j_child1.getTupleDesc();
    	//td.getFieldName(i)
    	
    	TupleDesc td = j_child1.getTupleDesc();
    	
    	String output = td.getFieldName(j_p.jp_field1);
    	
        return output;
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        
    	TupleDesc td = j_child2.getTupleDesc();
    	
    	String output = td.getFieldName(j_p.jp_field2);
    	
        return output;
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
    	
    	return TupleDesc.merge(j_child1.getTupleDesc(), j_child2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
    	
    	j_child1.open();
    	j_child2.open();
    	super.open();
    	
    }

    public void close() {
        // some code goes here
    	
    	j_child1.close();
    	j_child2.close();
    	super.close();
    	
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
    	
    	j_child1.rewind();
    	j_child2.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
    	    	
    	boolean restart_row = false;
    	
    	while(left_tuple != null || j_child1.hasNext())
    	{	
    		if(left_tuple == null) left_tuple = j_child1.next();
    		if(restart_row) j_child2.rewind();
    		
    		while(j_child2.hasNext())
    		{
    			Tuple right_tuple = j_child2.next();
    			boolean join_worked = j_p.filter(left_tuple, right_tuple);
    			
    			if(join_worked)
    			{
    				TupleDesc updated_TD = TupleDesc.merge(left_tuple.getTupleDesc(), right_tuple.getTupleDesc());
    				Tuple updated_Tuple = new Tuple(updated_TD);
    				
    				int size1 = left_tuple.getTupleDesc().numFields();
    				int size2 = right_tuple.getTupleDesc().numFields();
    				
    				for(int i=0; i< size1; i++)
    				{
    					Field f = left_tuple.getField(i);
    					updated_Tuple.setField(i,f);
    				}
    				
    				for(int i=0; i< size2; i++)
    				{
    					Field f = right_tuple.getField(i);
    					updated_Tuple.setField(i+size1,f);
    				}
    				
    				return updated_Tuple;
    			}	
    		}
    		
    		left_tuple = null;
    		restart_row = true;
    	}
        return null;
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
        return null;
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
    }

}
